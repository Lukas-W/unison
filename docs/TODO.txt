
Immediate TODO:
===============
x TODOs
- Movement of code from main.cpp:
x   JackEngine and Callbacks
x   Connections and Compiling
x     Connections across Containers
x       add node.parent()
x       enhancements to compiler
x     Ability to find Ports by name for connecting purposes
      COMPILE ON INTERNAL GRAPH CHANGES! (and find bufferProvider)   << HERE
x Documentation and add UNISON_ to #ifndefs
x ControlPorts
x Release To SF.net

  ExtensionSystem
    core
    lv2
    lv2-features
    Plugin => Component/Module/Extension ?
    ::Internal => ::Private ?

  Add whatever we need to get compilations to happen automatically,
  Properly defer installing new graph until pre-process

  MidiPorts

  Split stuff out of Plugin and Port and create general purpose
    PluginProcessor and PortNode classes for managing the graph.
    (Less logic in each Lv2/VSt/etc Port and Plugin implementation.

  Ability to remove stuff, with an eye toward resource-cleanup.
    Smart-pointers are fine for Plugin-refs and stuff!

  BufferSize Changes, and probably enhacements to PooledBufferProvider

  TODO-NOWs
  Release To SF.net ??
  Jack - proper tie-in with session - allowing jack to disconnect etc..
  Mixing (multi-connect)
  Thread
  QActions
  Handle buffer-size changes
  Finish Memory Management


Random thoughts:
================

Support Lv2Plugin features
SharedBufferPtr vs BufferPtr vs BufferProvider::BufferPtr vs
  BufferProvider::Ptr


================
Port.isInput(),isOutput(),direction()  Most underlying ports have native
isInput or isOutput functions.  Using direction() forces us to if-else on the
native function then requires the consumer to switch() on the Direction. Is
this really what we want??

Graph (PortGraph?):

  Some means of connecting these in the graph.



Or... Make JackEngine a "Plugin"?  or, make Plugin and JackEngine "PortHolders" (GraphNodes)


Recording line:
JackInsert -> (Pre FX)* -> Mute/Fader -> Panner -> (Post FX)* -> Disk -> JackSend

Instrument line
InstrumentInsert -> (Pre FX)* -> Mute/Fader -> Panner -> (Post FX)* -> JackSend

Master or Send line:
JackInsert -> (Pre FX)* -> Mute/Fader -> Panner -> (Post FX)* -> JackSend



A                   B            C             D         E             F
InstrumentInsert -> (Pre FX)* -> Mute/Fader -> Panner -> (Post FX)* -> JackSend



Ao -> Bi
Bo -> Ci
Co -> Di
Do -> Ei
Eo -> Fi

