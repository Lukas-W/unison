<pgib> torbenh4, I heard you've experiemented with boost::asio some for streaming audio to/from disk?
<torbenh4> pgib: i think your mixing up boost::asio and aio.
<torbenh4> pgib: but aio can improve HD throughput. yes.
<petern_> torbenh4, my fault in pgib's mix up :)
<pgib> torbenh4, ah ok. I was talking with petern_ earlier today about recording audio.  The big thing is that audio needs to be read or written to disk, but obviously this is bad to do in the processing thread.
<pgib> petern_, metioned your experiences with asio (and meant boost:aio).  
<torbenh4> aio is not boost.
<torbenh4> and it doesnt allow you to read audio from the RT thread.
<pgib> ok. let me generalize my question then :)  I'm wondering if anyone has a utility in their toolkit for handling the buffering,etc. needed to stream audio to/from disk
<pgib> I guess Jack's ringbuffer may be sufficient?
<torbenh4> yeah. ringebuffers are the key. then either use semaphores or have some thread periodically wake up and manage filling up the buffers.
<torbenh4> aio only helps you to increase the HD throughput, while reading 50 channels at once.
<pgib> ok, I guess semaphores will probably be the best to guard against starvation, but will generally be less efficient
<torbenh4> less efficient ?
<torbenh4> the problem is that you cant wait for multiple semaphores.
<pgib> oh, I read "spinlock", nevermind.  but, I thought the semaphore would block and you can't have blocking in the processing..
<torbenh4> the process thread only ups the semaphore. thats not blocking.
<pgib> but it would block if streaming the other direction, right?  maybe I need to take a step back
<torbenh4> pgib: the semphore would represent ringbuffer fill. and you need to do it in a way that it will block if the diskthread cant do anything.
<torbenh4> so the disk thread will go to sleep.
<torbenh4> that means for recording diskthread blocks if RB is empty. and for playback diskthread blocks when RB is full.
<pgib> ahha. and the processing thread always posts/ups. ok I see
<pgib> I was looking at it like a noob
<torbenh4> pgib: yeah. but be aware that this doesnt scale.
<torbenh4> it only works if your channel track count never changes.
<torbenh4> as soon as you dynamically add tracks somehow it will start to break.
<pgib> "tracks" = a user of a unique audio-file in this context?
<torbenh4> well.. a "diskstream and jack port it feeds"
<pgib> yeah ok, we are on the same page
<torbenh4> pgib: you cant blocking wait on multiple semaphores.
<pgib> but it won't be multiple semaphores right? one semaphore per diskstream
<torbenh4> well.. the semaphore represents the fill level. so if you have different RBs with different filllevels. they cant be represented by a semaphore.
<torbenh4> pgib: so you just need a thread that wakes up every second. and makes sure all RBs are filled (have space) with like 3 seconds.
<pgib> yeah, seems a bit cleaner from a design standpoint anyways (disregarding concurrency issues)
<pgib> thanks for your expertise torbenh4!
