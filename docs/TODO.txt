
Core TODO:
===============
  CLEANUP!!  (Just libunison first)
      exceptions assert qFatal
    x fix all warnings
      Make sure we are managing memory correctly.
        pointer vs ref vs smart pointers
        Commander cleanup
        Demo cleanup
  Copy to/from Jack or fix AudioBuffer "owns" Jack data relationship
  QFlagify enums

watchout with acquireBuffer() on Port(Dis)Connect..
  is the reference to the old port lost?
  does this mean that the port is connected to a recycled buffer?
  do we need to hold on to a reference until postExecute?

  BufferSize and Sample-rate Changes, and probably enhacements to PooledBufferProvider
    g_slice ?
    RCU

  Allow browsing/searching IPluginProviders

  Code cleanup:
    #include - remove unneeded includes, make sure ordering is correct
    code style - mostly whitespacing
    documentation - decide on a style, document undocumented stuff
    use tr() everywhere we should


Plugins TODO:
===================
  Make an LV2 extension so our LV2 plugins can have tighter (optional)
  integration with Unison(Studio).  For example, loading samplebuffers, Qt UI,
  Widget library for things like knobs and graphs, hooking into the Main UI.
  However, alot of tasks could be done through a standard such as OSC.

  Port all the Plugins to LV2:
    TripleOsc
    Lb302
    AudioSampler
    BitInvader
    SF2Player
    Organic
    Papu
    Patman
    SID
    Vibed
    BassBooster
    SpectrumAnalyzer
    StereoMatrix
    
  VST - VST will be its own extension
  ZASF - Not sure what we will do with ZynAddSuxFx just yet

  LV2-features
x   URI-map
    Event-port (MIDI)
    Units
    Port groups
    
  Extensions TODO:
  ======================

  Jack: on Xrun, mark all workers as done

  Unison Projects
  LMMS Project import
  FLP import
  MIDI import
  KDE integration
  Scripting
  OSC

  Sequencer
    MidiPorts
    MetricMap
    Sequencer
    Pattern
    Tracks
    Song

  Split stuff out of Plugin and Port and create general purpose
    PluginProcessor and PortNode classes for managing the graph.
    (Less logic in each Lv2/VSt/etc Port and Plugin implementation.

  Ability to remove stuff, with an eye toward resource-cleanup.
    Smart-pointers are fine for Plugin-refs and stuff!

  Jack - proper tie-in with session - allowing jack to disconnect etc..
  Mixing (multi-connect)
  QActions


Random thoughts:
================
Port.isInput(),isOutput(),direction()  Most underlying ports have native
isInput or isOutput functions.  Using direction() forces us to if-else on the
native function then requires the consumer to switch() on the Direction. Is
this really what we want??
