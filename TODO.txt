
Immediate TODO:
===============
x TODOs
- Movement of code from main.cpp:
x   JackEngine and Callbacks
x   Connections and Compiling									<< We are here
x     add node.parent()
      Connections across Containers
      Ability to find Ports by name for connecting purposes
  COMPILE ON INTERNAL GRAPH CHANGES!!!!!!! (and find bufferProvider)
  ControlPorts
  Release To SF.net ??
  Split stuff out of Plugin and Port and create general purpose
    PluginProcessor and PortNode classes for managing the graph.
    (Less logic in each Lv2/VSt/etc Port and Plugin implementation.
  TODO-NOWs
x Documentation and add UNISON_ to #ifndefs
  Release To SF.net ??
  Jack - proper tie-in with session - allowing jack to disconnect etc..
  Mixing (multi-connect)
  Thread
  QActions
  Handle buffer-size changes
  Finish Memory Management


Random thoughts:
================

Support Lv2Plugin features
SharedBufferPtr vs BufferPtr vs BufferProvider::BufferPtr vs
  BufferProvider::Ptr


================
Port.isInput(),isOutput(),direction()  Most underlying ports have native
isInput or isOutput functions.  Using direction() forces us to if-else on the
native function then requires the consumer to switch() on the Direction. Is
this really what we want??

Graph (PortGraph?):

  Some means of connecting these in the graph.



Or... Make JackEngine a "Plugin"?  or, make Plugin and JackEngine "PortHolders" (GraphNodes)


Recording line:
JackInsert -> (Pre FX)* -> Mute/Fader -> Panner -> (Post FX)* -> Disk -> JackSend

Instrument line
InstrumentInsert -> (Pre FX)* -> Mute/Fader -> Panner -> (Post FX)* -> JackSend

Master or Send line:
JackInsert -> (Pre FX)* -> Mute/Fader -> Panner -> (Post FX)* -> JackSend



A                   B            C             D         E             F
InstrumentInsert -> (Pre FX)* -> Mute/Fader -> Panner -> (Post FX)* -> JackSend



Ao -> Bi
Bo -> Ci
Co -> Di
Do -> Ei
Eo -> Fi

